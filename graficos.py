import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import supabase

# Fun칞칚o para inicializar conex칚o com Supabase
def init_connection():
    # Obter as credenciais do secrets.toml
    supabase_url = st.secrets["connections"]["supabase"]["SUPABASE_URL"]
    supabase_key = st.secrets["connections"]["supabase"]["SUPABASE_KEY"]
    
    # Criar cliente do Supabase
    client = supabase.create_client(supabase_url, supabase_key)
    return client

# Fun칞칚o para buscar dados da tabela microbiologia
def fetch_microbiologia_data(client):
    try:
        response = client.table('microbiologia').select('*').execute()
        return {"success": True, "data": response.data}
    except Exception as e:
        return {"success": False, "error": str(e)}

# Fun칞칚o principal para exibir a p치gina de gr치ficos
def show_graficos():
    st.title("Gr치ficos de Microbiologia")
    st.write("Visualize os dados de microbiologia em formato gr치fico.")
    
    # Exibir spinner durante o carregamento dos dados
    with st.spinner("Carregando dados para gr치ficos..."):
        # Inicializar conex칚o Supabase
        supabase_client = init_connection()
        
        # Buscar dados da tabela microbiologia
        result = fetch_microbiologia_data(supabase_client)
        
        if result["success"]:
            if result["data"]:
                # Converter para DataFrame para visualiza칞칚o
                df = pd.DataFrame(result["data"])
                
                # Criar abas para diferentes tipos de gr치ficos (removido gr치fico de dispers칚o)
                tab1, tab2 = st.tabs(["Gr치ficos de Linha", "Gr치ficos de Barra"])
                
                with tab1:
                    st.subheader("Gr치ficos de Linha")
                    # Verificar se h치 colunas num칠ricas para plotar
                    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
                    
                    if numeric_cols:
                        # Converter a coluna de data para datetime se n칚o estiver
                        if 'dataamostra' in df.columns and df['dataamostra'].dtype != 'datetime64[ns]':
                            df['dataamostra'] = pd.to_datetime(df['dataamostra'])
                        
                        # Inicializar a vari치vel ponto_selecionado com valor padr칚o
                        ponto_selecionado = "Todos os Pontos"
                        
                        # Filtro por ponto de amostra
                        if 'pontoamostra' in df.columns:
                            pontos_amostra = df['pontoamostra'].unique().tolist()
                            ponto_selecionado = st.selectbox(
                                "Filtrar por Ponto de Amostra",
                                options=["Todos os Pontos"] + pontos_amostra
                            )
                            
                            # Aplicar filtro se um ponto espec칤fico for selecionado
                            if ponto_selecionado != "Todos os Pontos":
                                df_filtrado = df[df['pontoamostra'] == ponto_selecionado]
                            else:
                                df_filtrado = df
                        else:
                            df_filtrado = df
                            st.warning("Coluna 'pontoamostra' n칚o encontrada para filtrar.")
                        
                        # Permitir ao usu치rio selecionar colunas para o gr치fico
                        selected_cols = st.multiselect(
                            "Selecione as colunas para visualizar",
                            options=numeric_cols,
                            default=numeric_cols[:1] if numeric_cols else None
                        )
                        
                        if selected_cols:
                            # Usar a coluna dataamostra como eixo X
                            if 'dataamostra' in df_filtrado.columns:
                                # Criar gr치fico de linha com data no eixo X
                                fig = px.line(df_filtrado, x='dataamostra', y=selected_cols, 
                                             title="Evolu칞칚o ao longo do tempo" + 
                                             (f" - {ponto_selecionado}" if ponto_selecionado != "Todos os Pontos" else ""))
                                fig.update_xaxes(title="Data da Amostra")
                            else:
                                st.warning("Coluna 'dataamostra' n칚o encontrada. Usando 칤ndice como eixo X.")
                                fig = px.line(df_filtrado, y=selected_cols, 
                                             title="Evolu칞칚o dos valores" + 
                                             (f" - {ponto_selecionado}" if ponto_selecionado != "Todos os Pontos" else ""))
                            
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.info("Selecione pelo menos uma coluna para visualizar o gr치fico.")
                    else:
                        st.info("N칚o foram encontradas colunas num칠ricas para criar gr치ficos.")
                
                with tab2:
                    st.subheader("Gr치ficos de Barra")
                    # Verificar se h치 colunas categ칩ricas e num칠ricas
                    cat_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
                    num_cols = df.select_dtypes(include=['number']).columns.tolist()
                    
                    if cat_cols and num_cols:
                        # Inicializar a vari치vel ponto_selecionado com valor padr칚o
                        ponto_selecionado = "Todos os Pontos"
                        
                        # Filtro por ponto de amostra
                        if 'pontoamostra' in df.columns:
                            pontos_amostra = df['pontoamostra'].unique().tolist()
                            ponto_selecionado = st.selectbox(
                                "Filtrar por Ponto de Amostra",
                                options=["Todos os Pontos"] + pontos_amostra,
                                key="barra_ponto_amostra"  # Chave 칰nica para evitar conflito com o selectbox da aba anterior
                            )
                            
                            # Aplicar filtro se um ponto espec칤fico for selecionado
                            if ponto_selecionado != "Todos os Pontos":
                                df_filtrado = df[df['pontoamostra'] == ponto_selecionado]
                            else:
                                df_filtrado = df
                        else:
                            df_filtrado = df
                            st.warning("Coluna 'pontoamostra' n칚o encontrada para filtrar.")
                        
                        # Permitir ao usu치rio selecionar colunas para o gr치fico
                        x_col = st.selectbox("Selecione a coluna categ칩rica (eixo X)", cat_cols)
                        y_col = st.selectbox("Selecione a coluna num칠rica (eixo Y)", num_cols)
                        
                        # Criar gr치fico de barras
                        fig = px.bar(df_filtrado, x=x_col, y=y_col, 
                                    title=f"{y_col} por {x_col}" + 
                                    (f" - {ponto_selecionado}" if ponto_selecionado != "Todos os Pontos" else ""))
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.info("S칚o necess치rias colunas categ칩ricas e num칠ricas para criar gr치ficos de barra.")
                
                # Gr치fico de dispers칚o removido conforme solicitado
            else:
                st.info("Nenhum dado encontrado na tabela de microbiologia para gerar gr치ficos.")
        else:
            st.error(f"Erro ao buscar dados: {result.get('error')}")
    
    # Adicionar informa칞칫es adicionais
    st.subheader("Sobre os Gr치ficos")
    st.write("""
    Esta se칞칚o apresenta visualiza칞칫es gr치ficas dos dados de microbiologia. 
    Os gr치ficos s칚o gerados dinamicamente com base nos dados dispon칤veis no banco de dados.
    
    Para uma an치lise mais detalhada, voc칡 pode selecionar diferentes colunas e tipos de gr치ficos nas abas acima.
    """)
    
    # Adicionar exibi칞칚o da tabela de dados abaixo dos gr치ficos
    st.divider()
    st.subheader("Tabela de Dados")
    st.write("Visualize os dados completos da tabela de microbiologia.")
    
    if result["success"] and result["data"]:
        # Converter para DataFrame para visualiza칞칚o se ainda n칚o foi feito
        df = pd.DataFrame(result["data"])
        
        # Criar colunas para layout
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Adicionar filtros e busca
            st.text_input("Filtrar dados", key="filter_text_graficos", 
                         placeholder="Digite para filtrar...")
        
        with col2:
            # Adicionar op칞칚o de download
            if len(result["data"]) > 0:
                csv = df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="游닌 Download CSV",
                    data=csv,
                    file_name="microbiologia_data.csv",
                    mime="text/csv",
                )
        
        # Aplicar filtro se houver texto de filtro
        if "filter_text_graficos" in st.session_state and st.session_state.filter_text_graficos:
            filter_text = st.session_state.filter_text_graficos.lower()
            filtered_df = df[df.apply(lambda row: row.astype(str).str.contains(filter_text, case=False).any(), axis=1)]
            st.dataframe(filtered_df, use_container_width=True)
        else:
            st.dataframe(df, use_container_width=True)
        
        # Mostrar estat칤sticas b치sicas
        st.subheader("Resumo dos Dados")
        st.info(f"Total de registros: {len(df)}")
        
        # Exibir estat칤sticas num칠ricas se houver colunas num칠ricas
        numeric_cols = df.select_dtypes(include=['number']).columns
        if len(numeric_cols) > 0:
            st.write("Estat칤sticas das colunas num칠ricas:")
            st.dataframe(df[numeric_cols].describe(), use_container_width=True)