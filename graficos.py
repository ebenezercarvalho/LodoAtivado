import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import supabase

# Fun√ß√£o para inicializar conex√£o com Supabase
def init_connection():
    # Obter as credenciais do secrets.toml
    supabase_url = st.secrets["connections"]["supabase"]["SUPABASE_URL"]
    supabase_key = st.secrets["connections"]["supabase"]["SUPABASE_KEY"]
    
    # Criar cliente do Supabase
    client = supabase.create_client(supabase_url, supabase_key)
    return client

# Fun√ß√£o para buscar dados da tabela microbiologia
def fetch_microbiologia_data(client):
    try:
        response = client.table('microbiologia').select('*').execute()
        return {"success": True, "data": response.data}
    except Exception as e:
        return {"success": False, "error": str(e)}

# Fun√ß√£o principal para exibir a p√°gina de gr√°ficos
def show_graficos():
    st.title("Gr√°ficos de Microbiologia")
    st.write("Visualize os dados de microbiologia em formato gr√°fico.")
    
    # Exibir spinner durante o carregamento dos dados
    with st.spinner("Carregando dados para gr√°ficos..."):
        # Inicializar conex√£o Supabase
        supabase_client = init_connection()
        
        # Buscar dados da tabela microbiologia
        result = fetch_microbiologia_data(supabase_client)
        
        if result["success"]:
            if result["data"]:
                # Converter para DataFrame para visualiza√ß√£o
                df = pd.DataFrame(result["data"])
                
                # Criar abas para diferentes tipos de gr√°ficos
                tab1, tab2, tab3 = st.tabs(["Gr√°ficos de Linha", "Gr√°ficos de Barra", "Gr√°ficos de Dispers√£o"])
                
                with tab1:
                    st.subheader("Gr√°ficos de Linha")
                    # Verificar se h√° colunas num√©ricas para plotar
                    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
                    
                    if numeric_cols:
                        # Permitir ao usu√°rio selecionar colunas para o gr√°fico
                        selected_cols = st.multiselect(
                            "Selecione as colunas para visualizar",
                            options=numeric_cols,
                            default=numeric_cols[:1] if numeric_cols else None
                        )
                        
                        if selected_cols:
                            # Verificar se h√° uma coluna de data para usar como eixo x
                            date_cols = df.select_dtypes(include=['datetime']).columns.tolist()
                            if date_cols:
                                x_axis = st.selectbox("Selecione a coluna para o eixo X", date_cols)
                                # Criar gr√°fico de linha
                                fig = px.line(df, x=x_axis, y=selected_cols, title="Evolu√ß√£o ao longo do tempo")
                            else:
                                # Se n√£o houver coluna de data, usar √≠ndice
                                fig = px.line(df, y=selected_cols, title="Evolu√ß√£o dos valores")
                            
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.info("Selecione pelo menos uma coluna para visualizar o gr√°fico.")
                    else:
                        st.info("N√£o foram encontradas colunas num√©ricas para criar gr√°ficos.")
                
                with tab2:
                    st.subheader("Gr√°ficos de Barra")
                    # Verificar se h√° colunas categ√≥ricas e num√©ricas
                    cat_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
                    num_cols = df.select_dtypes(include=['number']).columns.tolist()
                    
                    if cat_cols and num_cols:
                        # Permitir ao usu√°rio selecionar colunas para o gr√°fico
                        x_col = st.selectbox("Selecione a coluna categ√≥rica (eixo X)", cat_cols)
                        y_col = st.selectbox("Selecione a coluna num√©rica (eixo Y)", num_cols)
                        
                        # Criar gr√°fico de barras
                        fig = px.bar(df, x=x_col, y=y_col, title=f"{y_col} por {x_col}")
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.info("S√£o necess√°rias colunas categ√≥ricas e num√©ricas para criar gr√°ficos de barra.")
                
                with tab3:
                    st.subheader("Gr√°ficos de Dispers√£o")
                    # Verificar se h√° pelo menos duas colunas num√©ricas
                    if len(num_cols) >= 2:
                        # Permitir ao usu√°rio selecionar colunas para o gr√°fico
                        x_col = st.selectbox("Selecione a coluna para o eixo X", num_cols)
                        y_col = st.selectbox("Selecione a coluna para o eixo Y", 
                                             [col for col in num_cols if col != x_col] if len(num_cols) > 1 else num_cols)
                        
                        # Op√ß√£o para adicionar uma terceira dimens√£o (tamanho)
                        size_col = st.selectbox("Selecione a coluna para o tamanho dos pontos (opcional)", 
                                               ["Nenhum"] + [col for col in num_cols if col != x_col and col != y_col])
                        
                        # Criar gr√°fico de dispers√£o
                        if size_col != "Nenhum":
                            fig = px.scatter(df, x=x_col, y=y_col, size=size_col, 
                                           title=f"Rela√ß√£o entre {x_col} e {y_col} (tamanho: {size_col})")
                        else:
                            fig = px.scatter(df, x=x_col, y=y_col, 
                                           title=f"Rela√ß√£o entre {x_col} e {y_col}")
                        
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.info("S√£o necess√°rias pelo menos duas colunas num√©ricas para criar gr√°ficos de dispers√£o.")
            else:
                st.info("Nenhum dado encontrado na tabela de microbiologia para gerar gr√°ficos.")
        else:
            st.error(f"Erro ao buscar dados: {result.get('error')}")
    
    # Adicionar informa√ß√µes adicionais
    st.subheader("Sobre os Gr√°ficos")
    st.write("""
    Esta se√ß√£o apresenta visualiza√ß√µes gr√°ficas dos dados de microbiologia. 
    Os gr√°ficos s√£o gerados dinamicamente com base nos dados dispon√≠veis no banco de dados.
    
    Para uma an√°lise mais detalhada, voc√™ pode selecionar diferentes colunas e tipos de gr√°ficos nas abas acima.
    """)
    
    # Adicionar exibi√ß√£o da tabela de dados abaixo dos gr√°ficos
    st.divider()
    st.subheader("Tabela de Dados")
    st.write("Visualize os dados completos da tabela de microbiologia.")
    
    if result["success"] and result["data"]:
        # Converter para DataFrame para visualiza√ß√£o se ainda n√£o foi feito
        df = pd.DataFrame(result["data"])
        
        # Criar colunas para layout
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Adicionar filtros e busca
            st.text_input("Filtrar dados", key="filter_text_graficos", 
                         placeholder="Digite para filtrar...")
        
        with col2:
            # Adicionar op√ß√£o de download
            if len(result["data"]) > 0:
                csv = df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• Download CSV",
                    data=csv,
                    file_name="microbiologia_data.csv",
                    mime="text/csv",
                )
        
        # Aplicar filtro se houver texto de filtro
        if "filter_text_graficos" in st.session_state and st.session_state.filter_text_graficos:
            filter_text = st.session_state.filter_text_graficos.lower()
            filtered_df = df[df.apply(lambda row: row.astype(str).str.contains(filter_text, case=False).any(), axis=1)]
            st.dataframe(filtered_df, use_container_width=True)
        else:
            st.dataframe(df, use_container_width=True)
        
        # Mostrar estat√≠sticas b√°sicas
        st.subheader("Resumo dos Dados")
        st.info(f"Total de registros: {len(df)}")
        
        # Exibir estat√≠sticas num√©ricas se houver colunas num√©ricas
        numeric_cols = df.select_dtypes(include=['number']).columns
        if len(numeric_cols) > 0:
            st.write("Estat√≠sticas das colunas num√©ricas:")
            st.dataframe(df[numeric_cols].describe(), use_container_width=True)